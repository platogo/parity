require 'bundler/gem_tasks'
require 'rspec/core/rake_task'
require File.expand_path("../lib/parity/version", __FILE__)

RSpec::Core::RakeTask.new('spec')

task default: :spec

PROJECT_NAME = "parity"
TRAVELING_RUBY_VERSION = "20150517-2.2.2"
TRAVELING_RUBY_HOST = "http://d6r77u77i8pq3.cloudfront.net/releases"
RUBY_BASENAME = "traveling-ruby-#{TRAVELING_RUBY_VERSION}"

namespace :package do
  desc "Generate parity #{Parity::VERSION} packages for OSX, Linux x86 and Linux x86_64"
  task all: ["linux:x86", "linux:x86_64", "osx"]

  namespace :linux do
    desc "Generate parity #{Parity::VERSION} package for Linux x86"
    task x86: "packaging/#{RUBY_BASENAME}-linux-x86.tar.gz" do
      clean_up("linux-x86")
      create_package("linux-x86")
    end

    desc "Generate parity #{Parity::VERSION} package for Linux x86_64"
    task x86_64: "packaging/#{RUBY_BASENAME}-linux-x86_64.tar.gz" do
      clean_up("linux-x86_64")
      create_package("linux-x86_64")
    end
  end

  desc "Generate parity #{Parity::VERSION} package for OSX"
  task osx: "packaging/#{RUBY_BASENAME}-osx.tar.gz" do
    clean_up("osx")
    create_package("osx")
  end

  desc "Remove the files generated by packaging"
  task :cleanup do
    clean_up("osx")
    clean_up("linux-x86")
    clean_up("linux-x86_64")
  end
end

file "packaging/#{RUBY_BASENAME}-osx.tar.gz" do
  sh "cd packaging && curl -L -O --fail #{TRAVELING_RUBY_HOST}/#{ruby_for("osx")}"
end

file "packaging/#{RUBY_BASENAME}-linux-x86.tar.gz" do
  sh "cd packaging && curl -L -O --fail #{TRAVELING_RUBY_HOST}/#{ruby_for("linux-x86")}"
end

file "packaging/#{RUBY_BASENAME}-linux-x86_64.tar.gz" do
  sh "cd packaging && curl -L -O --fail #{TRAVELING_RUBY_HOST}/#{ruby_for("linux-x86_64")}"
end

def create_package(target)
  package_dir = "#{PROJECT_NAME}-#{Parity::VERSION}-#{target}"

  copy_lib(package_dir)
  copy_binaries(package_dir)
  copy_shims(package_dir)
  extract_ruby(package_dir, target)
  archive_package(package_dir)
end

def clean_up(target)
  package_name = "#{PROJECT_NAME}-#{Parity::VERSION}-#{target}"
  rm_rf package_name
  rm_f "#{package_name}.tar.gz"
end

def ruby_for(target)
  "#{RUBY_BASENAME}-#{target}.tar.gz"
end

def copy_lib(package_dir)
  app_dir = "#{package_dir}/lib/app"
  mkdir_p app_dir

  cp_r "lib", app_dir
  cp "README.md", app_dir
end

def copy_binaries(package_dir)
  bin_path = "#{package_dir}/lib/app/bin"
  mkdir_p bin_path

  cp "bin/development", bin_path
  cp "bin/staging", bin_path
  cp "bin/production", bin_path
end

def copy_shims(package_dir)
  shim_dir = "#{package_dir}/bin"
  mkdir shim_dir
  cp "packaging/development_shim.sh", "#{shim_dir}/development"
  cp "packaging/staging_shim.sh", "#{shim_dir}/staging"
  cp "packaging/production_shim.sh", "#{shim_dir}/production"
end

def extract_ruby(package_dir, target)
  ruby_dir = "#{package_dir}/lib/ruby"
  mkdir_p ruby_dir
  sh "tar -xzf packaging/#{ruby_for(target)} -C #{ruby_dir}"
end

def archive_package(package_dir)
  sh "tar -czf #{package_dir}.tar.gz #{package_dir}"
end
